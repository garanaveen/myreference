git reflog
git reset --hard <sha>


git remote set-url origin git@github.com:USERNAME/REPOSITORY.git
git remote set-url origin git@github.com:garanaveen/linuxcommands.git
git remote set-url origin git@github.com:garanaveen/myreference.git

git remote add remotename git@github.com:garanaveen/myreference.git


gitkraken - how to remove the "recently open" entries from gitkraken?
Delete the entry in .gitkraken/profiles/<uuid>/localRepoCache
https://stackoverflow.com/questions/38068790/remove-repository-from-gitkraken-overview


How to archive the entire repo's working directory?
hg archive ~/source.tar.gz -X ".hg*"
git archive --format=tar --prefix=myreference-20181019/ HEAD > ~/tarofmyreference.tar.gz


Check which commit introduced or deleted a specific regex-pattern, (This is very time consuming)
https://stackoverflow.com/questions/1337320/how-to-grep-git-commit-diffs-or-contents-for-a-certain-word
git log --pickaxe-regex -p --color-words -S <regex-pattern>
git config diff.renameLimit 4950


Show the conents of file at a particular revision,
git show SHA1:filepath
https://stackoverflow.com/questions/338436/is-there-a-quick-git-command-to-see-an-old-version-of-a-file

Print just the sha1 list for a file,
git rev-list HEAD DiagnosticsCenterApp_pt.ts
https://stackoverflow.com/questions/20873649/show-sha1-only-with-git-log

Log/Print the local branches that are not present in remote. (LocalOnly branches)
git log --graph --oneline --branches --not --remotes=*


How to check for the existence of a particular string in all changesets of git?
Other keywords : Bisect. Where did this line change? Where was this line introduced or deleted?
for sha1 in $(git rev-list HEAD FileName.txt) ; do 
   echo $sha1 ; 
   git show $sha1:./FileName.txt | grep "regex-pattern"; 
done

git rev-list --all <filename> | (
    while read revision; do
        git grep '<search-pattern' $revision <filename>
    done
)




How to delete a branch on git?
git branch -d branch_name
git branch -D branch_name

---------------------------------------------------------------------------------------------

Create a pull request to a release branch. (Keywords:PullRequest)
CanonicalFork - canon
LocalFork - local
Feature branch - feature
Release branch - release
1. Commit your change to feature branch.
2. Add canon as a remote if you haven't already done so.
3. Checkout canon/release branch. This will make a copy of release on local fork.
4. Create a branch called SpecificFeature on the tip of release branch.
5. Cherry pick the commit on to the SpecificFeature branch
6. Drag and drop the SpecificFeature on to the release branch. Choose "Push SpecificFeature and make a pull request to canon/release"
7. Go to canon and see if there are any pull requests. If yes thats all.

If the 6th step doesn't allow you to create a pull request, then create a pull request on github.
Go to the commit on github and say create pull request there, (The pull request is from Right to Left
base fork: canon/reponame, base:release ... head fork:local/reponame compare:SpecificFeature 

---------------------------------------------------------------------------------------------

(macOS only) So that your computer remembers your password each time it restarts, open (or create) the ~/.ssh/config file and add these lines to the file:
bitbucket
.ssh/config
Host *
  UseKeychain yes

---------------------------------------------------------------------------------------------

How to add ssh keys to bitbucket correctly?

$git push origin master
repository access denied. access via a deployment key is read-only.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

Don't add keys to the individual repository. Add the keys for the account.
Bottom-left user icon and then go to "Bitbucket settings" -> ssh keys.
If you add ssh keys by visiting the individual repository you can only clone and when you try to push you get the above error.

---------------------------------------------------------------------------------------------

https://stackoverflow.com/questions/3042437/how-to-change-the-commit-author-for-one-specific-commit
git rebase -i <ParentOfChangesetForWhichAuthorNeedsToBeChanged>
git commit --amend --author="Author Name <email@address.com>"
git rebase --continue
Force push to git repo if thats what you want.


If there are bunch of random commits which you want to change the author to,
git rebase -i <ParentOfChangesetForWhichAuthorNeedsToBeChanged>
Change "pick" to "edit" for all the commits
git commit --amend --author="Author Name <email@address.com>" --no-edit #repeat this step until the last commit
git rebase --continue #repeat this step until the last commit
Force push to git repo if thats what you want.

---------------------------------------------------------------------------------------------

How to generate a patch?
git format-patch -3 HEAD #Generate top three commits as patches.
git format-patch -1 <SHA> # Generate SHA commit as a patch.

----------------------


TODO : Figure out how to do "git grep <SearchPattern> <FileName>"
https://stackoverflow.com/questions/2928584/how-to-grep-search-committed-code-in-the-git-history
For this, you first need to generate rev-list and give that as a parameter.
git grep <searchpattern> $(git rev-list --all)
Mercurial equivalent of "hg grep"
----------------------

How to checkout/revert specific files to specific revision?
https://stackoverflow.com/questions/215718/reset-or-revert-a-specific-file-to-a-specific-revision-using-git
git checkout c5f567 -- file1/to/restore file2/to/restore
git checkout -- file/to/restore #git revert outstanding changes to a file.


git - How to list all the files in a commit?
git diff-tree --no-commit-id --name-only -r <sha>
hg st <sha> -n


If you just want to review the changes and discard just indentation changes,
git show --ignore-all-space <sha>

Check for all the authors who contributed a directory in git,
https://stackoverflow.com/questions/24807930/git-list-all-authors-of-a-folder-of-files
git shortlog -n -s -- myfolder
git log --pretty=format:"%an%x09" myfolder | sort | uniq


git log for deleted file when you know the name of the file.
git log --all --full-history -- **/thefile.*


Search for introduced/deleted search patterns in the history,
git log -S <SearchPattern> <Path/To/File>
This is somewhat related to "hg grep" in mercurial


https://git-scm.com/book/en/v2/Git-Tools-Searching
To find the history of a function in a specific file,
git log -L :function_name:filename.c
To find when a line was originally introduced
git log -S ZLIB_BUF_MAX --oneline
To just grep in the working directory
git grep -n <SearchPattern>
git grep --count gmtime_r



How to archive/tar the current working directory in git?
git archive --format=tar.gz --prefix=sensiblename/ HEAD > reponame-head.tar.gz


See the difference between release-1 and relelase-2 branches on github,
https://github.deere.com/fork-name/repo-name/compare/
https://github.deere.com/fork-name/repo-name/compare/release-1...release-2
Once this page is generated you can search for the file that you are interested in and see the diff.

Another public example,
https://github.com/octocat/linguist/compare/master...octocat:an-example-comparison-for-docs
https://docs.github.com/en/github/committing-changes-to-your-project/comparing-commits

See the difference between two commits-shas/branches/forks
https://github.com/<usename>/<reponame>/compare/<sha1>...<sha2>


See the diff for a file between a specific commit sha to current working copy,
git diff --cached <sha> -- <FileName>

How to squash last N changesets.
git rebase -i <parentofchangesetstosquash>
replace "pick" to "squash" or "fixup" for the ones which need to be squashed leavings the top one as it is.
Ex. to squash the top 5 changesets,
git rebase -i HEAD~5



-----------------------------
https://stackoverflow.com/questions/2249852/how-to-apply-a-patch-generated-with-git-format-patch
Applying a patch file in git,
First the stats:
git apply --stat a_file.patch
Then a dry run to detect errors:
git apply --check a_file.patch
Finally, you can use git am to apply your patch as a commit. This also allows you to sign off an applied patch.
git am --signoff < a_file.patch 
-----------------------------

If a file is already staged and you want to remove it from tracking but not remove it from filesystem,
git rm FileName.txt --cached

-----------------------------

Dangit, I committed and immediately realized I need to make one small change!
# make your change
git add . # or add individual files
git commit --amend --no-edit
# now your last commit contains that change!
# WARNING: never amend public commits

Removes all the untracked files,
git clean -f 

How to add a tag?
git tag -a v1.0 -m "Stable version of the project"

Add all files in the repository,
git add -A 
Add all files in the current directory,
git add .

Delete all branches that are on your local machine that are not in the remote repository.
git remote update --prune

forcefully delete all local changes on your current branch and replace them with the code from the main branch in the remote. 
git reset --hard origin/main


This commands adds the unstaged files and then commits all in one command.
git commit -am "commit message"


This will fetch all the branches and deletes branches that were deleted in the remote,
git fetch --all --prune

How to git pull submodules?
git pull --recurse-submodules




How to rename a local-only branch in git?  #git #branch #rename #move
git branch -m <old> <new>


#git : How do I just modify the commit message
git commit --amend


How to git unstage a file?
  (use "git restore --staged <file>..." to unstage)
git restore --staged <filename>


Rebase a feature brach to tip of main when there are conflits.
You made some changes on a branch. main has moved a bit. Now, you want to rebase the branch to the tip of main but you have conflicts that you need to resolve.
1. checkout the feature branch.
2. git rebase -i main
3. You will get conflict errors showing which file had a conflict. Open the file fix the "<<<<<< HEAD", "=====", ">>>>>>> hash-commit-message" issues.
4. git add <allthefixedfiles>
5. git rebase --continue (If there is more than one commit and the conflict is on any commit, once you continue, it will try to apply other commits and the process repeats if it has a conflict.



Meaning of Rebase command,
You have a main branch from which you branched out a feature-branch
You have N commits on feature-branch and main has moved quite a bit.
Now you want to rebase feature-branch to tip of newly fetched main (i.e. replay the N commits in feature-branch to the tip of main.)

1. Checkout feature-branch
$ git checkout feature-branch
2. Rebase feature-branch to main (#Meaning : Find the common ancestor of currently checked out branch (feature-branch) and specified branch (main) and replay commits on feature-branch to tip of main.)
$ git rebase -i main 


---------------------

How to force a branch point to a specific commit? git branch main force main
:~/tmp/dummy-repo-2$ git branch -f main 88289bb8be242e79eb362e38a15980432714d5d2

---------------------

If you screw up while rebasing the feature branch to main, you can always work on it in another alt-repo to fix the branch by applying patches on the required branch push it and then go back to original repo and pull the branch fresh.
If there are conflicts in the branch pulled, delete the branch locally, checkout the same branch and pull it again.

Ex,
git checkout main
git branch -D featureBranch
git checkout featureBranch
git pull




---------------------
git log graph, display how two branches are diverging
git log --graph --oneline currentbranch otherbranch
---------------------

How to do fast-forward merge?
Let's say you created a feature branch from main. You didn't commit anything on the feature branch and stopped working on this feature branch.
After a while, main has had quite a few commits.
When you want to start working on feature branch again, since your feature branch was created from a older hash of main, it only makes sense to point the feature branch to latest main before starting to commit changes on it.
Since there is a linear path from feature branch to latest main, you can make feature branch point to latest main by doing a fast-forward merge.
            feature
            ^
            |
C1 -> C2 -> C3 -> C4 -> C5
                         ^
                         |
                         main

>git checkout feature
>git merge main

These to commands will modify the branches as follows,

                         feature
                         ^
                         |
C1 -> C2 -> C3 -> C4 -> C5
                         ^
                         |
                         main

---------------------


How to do dry run for git merge
You are on <master> branch and want to merge in a <feature> branch but want to check if there are any merge conflicts.
https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option

git checkout <master>
$ git merge --no-commit --no-ff <feature>
$ git diff --cached #You can investigate what the merge changeset looks like from the staged changes.
$ git merge --abort #Abort the merge to discard the staged changes


How to merge latest changes in master to your current feature branch?
git checkout <feature>
git merge --no-commit --no-ff <master> #Resolve any conflicts!
git diff --cached
git commit -m "Merged main to feature" #This will create a merge commit



git : How to create a branch at a specific commit/hash
git branch branch_name <commit-hash>

--------------------------------------------------
How to git diff with meld?
--------------------------

git difftool --tool=meld
git diff

git diff main..feature-branch
git difftool --tool=meld main..feature-branch
--------------------------------------------------


How to get recent branch/branches names in git? #git #recent #branches
ngara@D888N83:~/ssd/aspen/app$ git for-each-ref --sort=-committerdate refs/heads/

